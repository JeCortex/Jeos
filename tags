!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AS	./src/Makefile	/^AS = as --32$/;"	m
BOOT_INFO_ADDR	./src/kernel.h	27;"	d
BOOT_INFO_SEG	./src/kernel.h	28;"	d
CC	./src/Makefile	/^CC = gcc -m32$/;"	m
CFLAGS	./src/Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -ggdb -m32 -Werror -fno-omit-frame-pointer -nostdinc -fno-stack-protector$/;"	m
CFLAGS	./src/Makefile	/^CFLAGS = -g -w -trigraphs -fno-builtin -fno-exceptions -fno-stack-protector -m32 -fno-rtti -nostdlib -nodefaultlibs -Werror -fno-omit-frame-pointer $/;"	m
CR0_PE	./src/kernel.h	56;"	d
ELF_MAGIC	./src/elf.h	11;"	d
FONT_ASC16_ADDR	./src/kernel.h	40;"	d
FONT_ASC16_LBA	./src/kernel.h	45;"	d
FONT_ASC16_SECT_NUM	./src/kernel.h	43;"	d
HD_STATE_BUSY	./src/loadmain.c	19;"	d	file:
HD_STATE_READY	./src/loadmain.c	18;"	d	file:
IO_CMD_READ	./src/loadmain.c	20;"	d	file:
KERNEL_BASE	./src/kernel.h	48;"	d
KERNEL_ELF_LBA	./src/kernel.h	44;"	d
KSTACK_SIZE	./src/kernel.h	21;"	d
LD	./src/Makefile	/^LD = ld$/;"	m
LDFLAGS	./src/Makefile	/^LDFLAGS = -m elf_i386 -static$/;"	m
MEMORY_INFO_ADDR	./src/kernel.h	35;"	d
MEMORY_INFO_OFFSET	./src/kernel.h	36;"	d
MEMORY_INFO_SIZE	./src/kernel.h	37;"	d
NULL	./src/types.h	9;"	d
PTE_P	./src/kernel.h	51;"	d
PTE_U	./src/kernel.h	53;"	d
PTE_W	./src/kernel.h	52;"	d
SECT_SIZE	./src/kernel.h	20;"	d
SECT_SIZE	./tool/checksize.c	16;"	d	file:
SEG_KCODE	./src/kernel.h	17;"	d
SEG_KDATA	./src/kernel.h	18;"	d
STACK_BOOT	./src/kernel.h	23;"	d
STACK_PM_BOTTOM	./src/kernel.h	24;"	d
VIDEO_INFO_ADDR	./src/kernel.h	31;"	d
VIDEO_INFO_SIZE	./src/kernel.h	32;"	d
_ELF_H_	./src/elf.h	7;"	d
_KENERL_H_	./src/kernel.h	14;"	d
_TYPES_H_	./src/types.h	7;"	d
_X86_H_	./src/x86.h	7;"	d
_start	./src/boot.S	/^_start:$/;"	l
_start	./src/entry.S	/^_start = entry - KERNEL_BASE$/;"	d
_start	./src/load.S	/^_start:$/;"	l
align	./src/elf.h	/^    uint32 align;$/;"	m	struct:prog_hdr_s
begin_protected_mode	./src/boot.S	/^begin_protected_mode:$/;"	l
bits_per_pixel	./src/boot.S	/^bits_per_pixel:$/;"	l
clear_screen	./src/boot.S	/^clear_screen:$/;"	l
copy_gdt_and_video_info	./src/boot.S	/^copy_gdt_and_video_info:$/;"	l
cx_screen	./src/loadmain.c	/^uint32 cx_screen = 1024;$/;"	v
cx_screen	./src/types.h	/^         uint16 cx_screen;$/;"	m	struct:vidoe_info_s
cy_screen	./src/loadmain.c	/^uint32 cy_screen = 768;$/;"	v
cy_screen	./src/types.h	/^         uint16 cy_screen;$/;"	m	struct:vidoe_info_s
disk_addr_packet	./src/boot.S	/^disk_addr_packet:$/;"	l
ehsize	./src/elf.h	/^    uint16 ehsize;$/;"	m	struct:elf_hdr_s
elf	./src/elf.h	/^    uint8  elf[12];$/;"	m	struct:elf_hdr_s
elf_hdr_s	./src/elf.h	/^typedef struct elf_hdr_s {$/;"	s
elf_hdr_t	./src/elf.h	/^} elf_hdr_t;$/;"	t	typeref:struct:elf_hdr_s
entry	./src/elf.h	/^    uint32 entry;$/;"	m	struct:elf_hdr_s
entry	./src/entry.S	/^entry:$/;"	l
f	./src/Makefile	/^	dd if=boot              of=Jeos_hd.img ibs=512 seek=0   count=1 conv=notrunc$/;"	m
f	./src/Makefile	/^	dd if=kernel            of=baby_hd.img ibs=512 seek=3           conv=notrunc$/;"	m
f	./src/Makefile	/^	dd if=loader            of=Jeos_hd.img ibs=512 seek=1   count=2 conv=notrunc$/;"	m
failed	./src/boot.S	/^failed:$/;"	l
filesz	./src/elf.h	/^    uint32 filesz;$/;"	m	struct:prog_hdr_s
flags	./src/elf.h	/^    uint32 flags;$/;"	m	struct:elf_hdr_s
flags	./src/elf.h	/^    uint32 flags;$/;"	m	struct:prog_hdr_s
gdt	./src/boot.S	/^gdt:$/;"	l
gdt_ptr	./src/boot.S	/^gdt_ptr:$/;"	l
get_memory_info	./src/boot.S	/^get_memory_info:$/;"	l
hung	./tool/checksize.c	/^void hung()$/;"	f
inb	./src/x86.h	/^static inline uint8 inb(uint16 port)$/;"	f
insl	./src/x86.h	/^static inline void insl(int port, void *addr, int cnt)$/;"	f
int32	./src/types.h	/^typedef int                 int32;$/;"	t
inw	./src/x86.h	/^static inline uint8 inw(uint16 port)$/;"	f
is_pixel_valid	./src/loadmain.c	/^static int is_pixel_valid(int32 x, int32 y)$/;"	f	file:
jmp	./src/boot.S	/^jmp main$/;"	l
kernel_entry_t	./src/loadmain.c	/^typedef void (*kernel_entry_t)(void);$/;"	t	file:
load_loader	./src/boot.S	/^load_loader:$/;"	l
loadmain	./src/loadmain.c	/^void loadmain()$/;"	f
machine	./src/elf.h	/^    uint16 machine;$/;"	m	struct:elf_hdr_s
magic	./src/elf.h	/^    uint32 magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elf_hdr_s
main	./src/boot.S	/^main:$/;"	l
main	./src/load.S	/^main:$/;"	l
main	./tool/checksize.c	/^int main(int argc, char **argv)$/;"	f
memory_model	./src/boot.S	/^memory_model:$/;"	l
memsz	./src/elf.h	/^    uint32 memsz;$/;"	m	struct:prog_hdr_s
movsb	./src/x86.h	/^static inline void movsb(void *dst, void *src, int32 cnt)$/;"	f
n_bits_per_pixel	./src/types.h	/^         uint8  n_bits_per_pixel;$/;"	m	struct:vidoe_info_s
n_bytes_per_pixel	./src/loadmain.c	/^uint32 n_bytes_per_pixel = 3;$/;"	v
n_memory_model	./src/types.h	/^         uint8  n_memory_model;$/;"	m	struct:vidoe_info_s
off	./src/elf.h	/^    uint32 off;$/;"	m	struct:prog_hdr_s
outb	./src/x86.h	/^static inline void outb(uint16 port, uint8 data)$/;"	f
outsl	./src/x86.h	/^static inline void outsl(int port, const void *addr, int cnt)$/;"	f
outw	./src/x86.h	/^static inline void outw(uint16 port, uint16 data)$/;"	f
p_video_info	./src/loadmain.c	/^video_info_t* p_video_info = (video_info_t *)VIDEO_INFO_ADDR;$/;"	v
p_vram_base_addr	./src/loadmain.c	/^uint8* p_vram_base_addr = (uint8 *)0xe0000000;$/;"	v
p_vram_base_addr	./src/types.h	/^         uint8* p_vram_base_addr;$/;"	m	struct:vidoe_info_s
paddr	./src/elf.h	/^    uint32 paddr;$/;"	m	struct:prog_hdr_s
phentsize	./src/elf.h	/^    uint16 phentsize;$/;"	m	struct:elf_hdr_s
phnum	./src/elf.h	/^    uint16 phnum;$/;"	m	struct:elf_hdr_s
phoff	./src/elf.h	/^    uint32 phoff;$/;"	m	struct:elf_hdr_s
prog_hdr_s	./src/elf.h	/^typedef struct prog_hdr_s {$/;"	s
prog_hdr_t	./src/elf.h	/^} prog_hdr_t;$/;"	t	typeref:struct:prog_hdr_s
read_a_sect_hd	./src/boot.S	/^read_a_sect_hd:$/;"	l
read_sector	./src/loadmain.c	/^void read_sector(void* buf, uint32 lba)$/;"	f
read_segment	./src/loadmain.c	/^void read_segment(void* pa, uint32 offset, uint32 size)$/;"	f
ret	./src/boot.S	/^ret$/;"	l
screen_x	./src/boot.S	/^screen_x:$/;"	l
screen_y	./src/boot.S	/^screen_y:$/;"	l
set_pixel	./src/loadmain.c	/^int set_pixel(int32 x, int32 y, uint8 r, uint8 g, uint8 b)$/;"	f
set_vga_0x13	./src/boot.S	/^set_vga_0x13:$/;"	l
set_video_mode	./src/boot.S	/^set_video_mode:$/;"	l
shentsize	./src/elf.h	/^    uint16 shentsize;$/;"	m	struct:elf_hdr_s
shnum	./src/elf.h	/^    uint16 shnum;$/;"	m	struct:elf_hdr_s
shoff	./src/elf.h	/^    uint32 shoff;$/;"	m	struct:elf_hdr_s
shstrndx	./src/elf.h	/^    uint16 shstrndx;$/;"	m	struct:elf_hdr_s
stosb	./src/x86.h	/^static inline void stosb(void *addr, int32 data, int32 cnt)$/;"	f
success	./src/boot.S	/^success:$/;"	l
test	./src/loadmain.c	/^void test()$/;"	f
type	./src/elf.h	/^    uint16 type;$/;"	m	struct:elf_hdr_s
type	./src/elf.h	/^    uint32 type;$/;"	m	struct:prog_hdr_s
uint16	./src/types.h	/^typedef unsigned short      uint16;$/;"	t
uint32	./src/types.h	/^typedef unsigned int        uint32;$/;"	t
uint8	./src/types.h	/^typedef unsigned char       uint8;$/;"	t
vaddr	./src/elf.h	/^    uint32 vaddr;$/;"	m	struct:prog_hdr_s
version	./src/elf.h	/^    uint32 version;$/;"	m	struct:elf_hdr_s
video_info_t	./src/types.h	/^} video_info_t;$/;"	t	typeref:struct:vidoe_info_s
video_mode	./src/boot.S	/^video_mode:$/;"	l
video_mode	./src/types.h	/^         uint16 video_mode;$/;"	m	struct:vidoe_info_s
video_ram	./src/boot.S	/^video_ram:$/;"	l
vidoe_info_s	./src/types.h	/^typedef struct vidoe_info_s {$/;"	s
wait_disk	./src/loadmain.c	/^void wait_disk()$/;"	f
